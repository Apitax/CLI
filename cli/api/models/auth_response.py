# coding: utf-8

"""
    Apitax

    The API for the frontend of Apitax  # noqa: E501

    OpenAPI spec version: 2
    Contact: shawn.clake@nopatience.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cli.api.models.user_auth import UserAuth  # noqa: F401,E501


class AuthResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'message': 'str',
        'access_token': 'str',
        'refresh_token': 'str',
        'auth': 'UserAuth'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'access_token': 'access_token',
        'refresh_token': 'refresh_token',
        'auth': 'auth'
    }

    def __init__(self, status=None, message=None, access_token=None, refresh_token=None, auth=None):  # noqa: E501
        """AuthResponse - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._message = None
        self._access_token = None
        self._refresh_token = None
        self._auth = None
        self.discriminator = None

        self.status = status
        self.message = message
        if access_token is not None:
            self.access_token = access_token
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if auth is not None:
            self.auth = auth

    @property
    def status(self):
        """Gets the status of this AuthResponse.  # noqa: E501


        :return: The status of this AuthResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthResponse.


        :param status: The status of this AuthResponse.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def message(self):
        """Gets the message of this AuthResponse.  # noqa: E501


        :return: The message of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuthResponse.


        :param message: The message of this AuthResponse.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def access_token(self):
        """Gets the access_token of this AuthResponse.  # noqa: E501


        :return: The access_token of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AuthResponse.


        :param access_token: The access_token of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AuthResponse.  # noqa: E501


        :return: The refresh_token of this AuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AuthResponse.


        :param refresh_token: The refresh_token of this AuthResponse.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def auth(self):
        """Gets the auth of this AuthResponse.  # noqa: E501


        :return: The auth of this AuthResponse.  # noqa: E501
        :rtype: UserAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this AuthResponse.


        :param auth: The auth of this AuthResponse.  # noqa: E501
        :type: UserAuth
        """

        self._auth = auth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
